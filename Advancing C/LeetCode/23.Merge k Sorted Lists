23.Merge k Sorted Lists

Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int size = lists.size(), i;
        ListNode *tmp;
        vector<int> vt;
        for(i=0; i<size; i++){
            tmp = lists[i];
            while(tmp){
                vt.push_back(tmp->val);
                tmp = tmp->next;
            }
        }
        sort(vt.begin(), vt.end());
        ListNode* t1 = new ListNode(0);
        tmp = t1;
        for(i=0, size=vt.size(); i<size; i++){
            ListNode* t2 = new ListNode(vt[i]);
            t1->next = t2;
            t1 = t2;
        }
        return tmp->next;
    }
    bool cmp(const int &a, const int &b){
        return a < b;
    }
};
