//  动归题目总是很有趣
/*
3. Longest Substring Without Repeating Characters

Given a string, find the length of the longest substring without repeating characters.

Examples:

Given "abcabcbb", the answer is "abc", which the length is 3.

Given "bbbbb", the answer is "b", with the length of 1.

Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, "pwke" is a subsequence and not a 
substring.
*/
// 这是答案用的方法，名字叫做‘优化的滑动窗口’，一开始我不相信这个代码是正确的。。。
// 建议用abccbad来理解这段代码，注意i的值是如何变的
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        map<char, int> mp;
        int n = s.length(), i, j, ans=0;
        for(i=0, j=0; j<n; j++){
            if(mp.find(s[j]) != mp.end()){
                i = max(mp.find(s[j])->second + 1, i);
            }
            ans = max(j-i+1, ans);
            mp[s[j]] = j; //若s[j]为重复的字符，则会更新其对应的下标
        }
        return ans;
    }
};
